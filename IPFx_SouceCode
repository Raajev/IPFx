Option Explicit


Function IP_Mod(IP As String, Optional Step As Variant, Optional Part As Variant)
'IP Modification function
'Function Modifies IP Address
    Dim PIP, IIP As Variant
    Dim Msg    As String

    IIP = Split(IP, "/")
    PIP = Split(IIP(0), ".")


    If IsMissing(Part) Then
        Part = 4
    End If

    If (Part > 4 Or Part < 0) Then
        Msg = "Input out of range"
        GoTo Msgannounce
    End If

    If IsMissing(Step) Then
        Step = 1
    End If

    If (Step > 255 Or Step < -255) Then
        Msg = "Input out of range"
        GoTo Msgannounce
    End If

    If Part = 1 Then

        PIP(LBound(PIP)) = PIP(LBound(PIP)) + Step
        IIP(0) = Join(PIP, ".")
    End If


    If Part = 2 Then

        PIP(1) = PIP(1) + Step
        IIP(0) = Join(PIP, ".")

    End If

    If Part = 3 Then


        PIP(2) = PIP(2) + Step
        IIP(0) = Join(PIP, ".")

    End If

    If Part = 4 Then

        PIP(UBound(PIP)) = PIP(UBound(PIP)) + Step
        IIP(0) = Join(PIP, ".")

    End If
    If (IP_ErrChk(Join(PIP, ".")) = "Error") Then
        Msg = "IP out of Range"
        GoTo Msgannounce

    Else
        IP_Mod = Join(IIP, "/")
        GoTo last

    End If

Msgannounce:
    'MsgBox Msg
    IP_Mod = CVErr(xlErrNum)

last:
End Function

Function IP_ErrChk(ByVal IP As String)


'IP Error Checking function
'Function checks if IP Address is valid or not

    Dim Chk_PIP, Chk_IIP As Variant

    Chk_IIP = Split(IP, "/")
    Chk_PIP = Split(Chk_IIP(0), ".")

    If ((Chk_PIP(0) < 0) Or (Chk_PIP(0) > 255) Or (Chk_PIP(1) < 0) Or (Chk_PIP(1) > 255) Or (Chk_PIP(2) < 0) Or (Chk_PIP(2) > 255) Or (Chk_PIP(3) < 0) Or (Chk_PIP(3) > 255)) Then
        IP_ErrChk = "Error"
    Else
        IP_ErrChk = "Valid"
    End If

End Function

Function IP_Bits2Mask(Maskbits As Integer)


'Mask bits to Subnet Mask conversion function
    Dim Msg    As String

    If Maskbits < 1 Or Maskbits > 32 Then
        Msg = "Mask Bits out of Range"
        GoTo Msgannounce
    End If


    If Maskbits < 9 Then
        IP_Bits2Mask = (256 - 2 ^ (8 - Maskbits)) & ".0.0.0"
        GoTo last
    End If

    If Maskbits < 17 Then
        IP_Bits2Mask = "255." & (256 - 2 ^ (16 - Maskbits)) & ".0.0"
        GoTo last
    End If

    If Maskbits < 25 Then
        IP_Bits2Mask = "255.255." & (256 - 2 ^ (24 - Maskbits)) & ".0"
        GoTo last
    End If

    If Maskbits < 33 Then
        IP_Bits2Mask = "255.255.255." & (256 - 2 ^ (32 - Maskbits))
        GoTo last
    End If


Msgannounce:
    'MsgBox Msg
    IP_Bits2Mask = CVErr(xlErrNum)
last:
End Function

Function IP_NextSub(IP As String, Optional Maskbits As Variant)
'next IP subnet calculation function
'Function calculates next IP subnet

    If IsMissing(Maskbits) Then
        Dim Tempsub As Variant
        Tempsub = Split(IP, "/")
        Maskbits = Tempsub(1)
    End If

    'Calculate the increment required
    If (Maskbits < 1) Then
        IP_NextSub = CVErr(xlErrNum)
        GoTo last:
    End If

    If Maskbits < 9 Then
        IP_NextSub = IP_Mod(IP, 2 ^ (8 - Maskbits), 1)
        GoTo last

    ElseIf Maskbits < 17 Then
        IP_NextSub = IP_Mod(IP, (2 ^ (16 - Maskbits)), 2)
        GoTo last

    ElseIf Maskbits < 25 Then
        IP_NextSub = IP_Mod(IP, (2 ^ (24 - Maskbits)), 3)
        GoTo last


    ElseIf Maskbits < 33 Then
        IP_NextSub = IP_Mod(IP, (2 ^ (32 - Maskbits)), 4)
        GoTo last

    Else

Msgannounce:
        'MsgBox Msg
        IP_NextSub = CVErr(xlErrNum)
    End If
last:
End Function

Function IP_IP2Mbits(NumberOfIPs As Long)

    Dim Mbits  As Integer

    If NumberOfIPs <= 0 Or NumberOfIPs > 2147483646 Then
        IP_IP2Mbits = "Error"
        GoTo last
    End If



    If NumberOfIPs = 1 Then
        Mbits = 32
    ElseIf NumberOfIPs = 2 Then
        Mbits = 30
    ElseIf NumberOfIPs <= 6 Then
        Mbits = 29
    ElseIf NumberOfIPs <= 14 Then
        Mbits = 28
    ElseIf NumberOfIPs <= 30 Then
        Mbits = 27

    ElseIf NumberOfIPs <= 62 Then
        Mbits = 26

    ElseIf NumberOfIPs <= 126 Then
        Mbits = 25

    ElseIf NumberOfIPs <= 254 Then
        Mbits = 24

    ElseIf NumberOfIPs <= 510 Then
        Mbits = 23

    ElseIf NumberOfIPs <= 1022 Then
        Mbits = 22

    ElseIf NumberOfIPs <= 2046 Then
        Mbits = 21

    ElseIf NumberOfIPs <= 4094 Then
        Mbits = 20

    ElseIf NumberOfIPs <= 8190 Then
        Mbits = 19

    ElseIf NumberOfIPs <= 16382 Then
        Mbits = 18

    ElseIf NumberOfIPs <= 32766 Then
        Mbits = 17

    ElseIf NumberOfIPs <= 65534 Then
        Mbits = 16

    ElseIf NumberOfIPs <= 131070 Then
        Mbits = 15

    ElseIf NumberOfIPs <= 262142 Then
        Mbits = 14

    ElseIf NumberOfIPs <= 524286 Then
        Mbits = 13

    ElseIf NumberOfIPs <= 1048574 Then
        Mbits = 12

    ElseIf NumberOfIPs <= 2097150 Then
        Mbits = 11

    ElseIf NumberOfIPs <= 4194302 Then
        Mbits = 10

    ElseIf NumberOfIPs <= 8388606 Then
        Mbits = 9

    ElseIf NumberOfIPs <= 16777214 Then
        Mbits = 8

    ElseIf NumberOfIPs <= 33554430 Then
        Mbits = 7

    ElseIf NumberOfIPs <= 67108862 Then
        Mbits = 6

    ElseIf NumberOfIPs <= 134217726 Then
        Mbits = 5

    ElseIf NumberOfIPs <= 268435454 Then
        Mbits = 4

    ElseIf NumberOfIPs <= 536870910 Then
        Mbits = 3

    ElseIf NumberOfIPs <= 1073741822 Then
        Mbits = 2

    ElseIf NumberOfIPs <= 2147483646 Then
        Mbits = 1

    End If


    IP_IP2Mbits = Mbits





last:
End Function

Function IP_Hosts(Mbits As Integer)
'number of Hosts calculation function
'Function calculates number of hosts from mask bits


    If Mbits > 0 And Mbits < 32 Then
        IP_Hosts = 2 ^ (32 - Mbits) - 2
    Else
        If Mbits = 32 Then
            IP_Hosts = 1
        Else
            IP_Hosts = CVErr(xlErrNum)
        End If
    End If

End Function
Function IP_Subnet(IP As Variant, Optional ByVal Maskbits As Integer) As Variant

'IP subnet calculation function
'Function calculates the subnet of the IP

    Dim Snet_IIP, Snet_PIP, Mask As Variant
    'Dim Snet_RIP1, Snet_RIP2, Snet_RIP3, Snet_RIP4 As Integer
    Dim Snet_RIP(3) As String

    Snet_IIP = Split(IP, "/")
    Snet_PIP = Split(Snet_IIP(0), ".")


    If Maskbits = 0 Then
        Maskbits = Snet_IIP(1)
    End If


    Mask = Split(IP_Bits2Mask(Maskbits), ".")

    'Snet_RIP1 = Snet_PIP(0) And Mask(0)
    'Snet_RIP2 = Snet_PIP(1) And Mask(1)
    'Snet_RIP3 = Snet_PIP(2) And Mask(2)
    'Snet_RIP4 = Snet_PIP(3) And Mask(3)

    Snet_PIP(0) = Snet_PIP(0) And Mask(0)
    Snet_PIP(1) = Snet_PIP(1) And Mask(1)
    Snet_PIP(2) = Snet_PIP(2) And Mask(2)
    Snet_PIP(3) = Snet_PIP(3) And Mask(3)

    'IP_Subnet = Join(Array(Snet_RIP1, Snet_RIP2, Snet_RIP3, Snet_RIP4), ".")
    Snet_IIP(0) = Join(Snet_PIP, ".")
    IP_Subnet = Join(Snet_IIP, "/")
    

End Function
Function IP_Bcast(IP As String, Optional Maskbits As Variant)
'Broadcast IP calculation function
'Function calculates the broadcast IP
    Dim Bcast_IIP, Bcast_PIP, Bcast_RIP As Variant
    Dim IPstr  As String
    Dim Mbits  As Integer


    Bcast_IIP = Split(IP, "/")
    Bcast_PIP = Split(Bcast_IIP(0), ".")

    If IsMissing(Maskbits) Then
        Maskbits = Bcast_IIP(1)
    End If


    IPstr = Bcast_IIP(0)
    Mbits = Maskbits
    Bcast_RIP = Split(IP_Subnet(IPstr, Mbits), ".")

    If (Mbits < 1) Then
        IP_Bcast = CVErr(xlErrNum)
        GoTo last:
    End If

    If (Mbits < 9) Then
        Bcast_RIP(0) = Bcast_RIP(0) + 2 ^ (8 - Mbits) - 1
        Bcast_RIP(1) = 255
        Bcast_RIP(2) = 255
        Bcast_RIP(3) = 255
        IP_Bcast = Join(Bcast_RIP, ".")
        GoTo last

    ElseIf Mbits < 17 Then
        Bcast_RIP(1) = Bcast_RIP(1) + 2 ^ (16 - Mbits) - 1
        Bcast_RIP(2) = 255
        Bcast_RIP(3) = 255
        IP_Bcast = Join(Bcast_RIP, ".")
        GoTo last

    ElseIf Mbits < 25 Then
        Bcast_RIP(2) = Bcast_RIP(2) + 2 ^ (24 - Mbits) - 1
        Bcast_RIP(3) = 255
        IP_Bcast = Join(Bcast_RIP, ".")
        GoTo last

    ElseIf Mbits < 33 Then
        Bcast_RIP(3) = Bcast_RIP(3) + 2 ^ (32 - Mbits) - 1
        IP_Bcast = Join(Bcast_RIP, ".")
        GoTo last


    Else


        IP_Bcast = CVErr(xlErrNum)
    End If
last:
End Function

Function IP_Mask2Bits(Mask As Variant)


'Subnet Mask to Mask bits conversion function
'Function Modifies IP Address
    Dim M2BPIP As Variant
    Dim i, j, Mbits As Integer




    M2BPIP = Split(Mask, ".")



    If (M2BPIP(0) < 0 Or M2BPIP(0) > 255) Or (M2BPIP(1) < 0 Or M2BPIP(1) > 255) Or (M2BPIP(2) < 0 Or M2BPIP(2) > 255) Or (M2BPIP(3) < 0 Or M2BPIP(3) > 255) Then
        IP_Mask2Bits = CVErr(xlErrNum)
        GoTo last
    End If

    Mbits = 0

    'M2BPIP(0) = 255
    'M2BPIP(1) = 255
    'M2BPIP(2) = 255
    'M2BPIP(3) = 255

    For i = 0 To 3
        For j = 0 To 8
            If (CInt(M2BPIP(i)) = 256 - (2 ^ (8 - j))) Then
                Mbits = Mbits + j
                If j < 8 Then GoTo slast
            End If
        Next j

    Next i

slast:

    IP_Mask2Bits = Mbits
last:
End Function

Function IP_IsExist(ByVal IPRnge As Variant, ByVal IP As Variant)
'IP Overlap Check  function
'Function checks if IP subnet is overlapping with another subnet
    Dim Cnflct_PIP, Cnflct_IIP, SPIP, SPIPRnge, PIPRnge, Cnflct_IIPRnge As Variant
    Dim IPNumSt, IPNumEnd, IPRngeNumSt, IPRngeNumEnd As Double
    Dim Maskbits, RngeMaskbits As Integer

    If IP_ErrChk(IP) = "Error" Then
        IP_IsExist = "Invalid IP"
    Else
        If IP_ErrChk(IPRnge) = "Error" Then
            IP_IsExist = "Invalid Range"
            GoTo last
        End If
    End If

    Cnflct_IIP = Split(IP, "/")
    Cnflct_PIP = Split(Cnflct_IIP(0), ".")

    If UBound(Cnflct_IIP) = 1 Then
        Maskbits = Cnflct_IIP(1)
    Else
        Maskbits = 0
    End If


    If Maskbits < 0 Or Maskbits > 32 Then
        IP_IsExist = "Invalid Mask Bits"
        GoTo last
    End If

    If Maskbits = 0 Then
        SPIP = Split(Cnflct_IIP(0), ".")
    Else
        SPIP = Split(IP_Subnet(Cnflct_IIP(0), Maskbits), ".")
    End If

    IPNumSt = SPIP(3) + SPIP(2) * 256 + SPIP(1) * 256 * 256 + SPIP(0) * 256 * 256 * 256
    If Maskbits = 0 Then
        IPNumEnd = IPNumSt
    Else
        IPNumEnd = IPNumSt + 2 ^ (32 - Maskbits) - 1
    End If

    Cnflct_IIPRnge = Split(IPRnge, "/")
    PIPRnge = Split(Cnflct_IIPRnge(0), ".")
    RngeMaskbits = Cnflct_IIPRnge(1)

    If RngeMaskbits < 1 Or RngeMaskbits > 32 Then
        IP_IsExist = "Invalid Mask Bits"
        GoTo last
    End If

    SPIPRnge = Split(IP_Subnet(Cnflct_IIPRnge(0), RngeMaskbits), ".")
    IPRngeNumSt = SPIPRnge(3) + SPIPRnge(2) * 256 + SPIPRnge(1) * 256 * 256 + SPIPRnge(0) * 256 * 256 * 256
    IPRngeNumEnd = IPRngeNumSt + 2 ^ (32 - RngeMaskbits) - 1

    If ((IPNumSt < IPRngeNumSt) And (IPNumEnd < IPRngeNumSt)) Or ((IPNumSt > IPRngeNumEnd) And (IPNumEnd > IPRngeNumEnd)) Then
        IP_IsExist = False
    Else
        IP_IsExist = True
    End If

last:
End Function

Function IP_Count(IPRnge As Range, IP As Variant)
'IP Overlap Check count function
'Function checks how many times IP subnet is overlapping with another subnet

    Dim CnflctCount_PIP, CnflctCount_IIP, SPIP, SPIPRnge, PIPRnge, CnflctCount_IIPRnge As Variant
    Dim IPNumSt, IPNumEnd, IPRngeNumSt, IPRngeNumEnd As Double
    Dim Maskbits, RngeMaskbits, ConfCount As Integer
    Dim rngCell As Range
    ConfCount = 0

    If IP_ErrChk(IP) = "Error" Then
        IP_Count = "Invalid IP"
        GoTo last
    End If

    CnflctCount_IIP = Split(IP, "/")
    CnflctCount_PIP = Split(CnflctCount_IIP(0), ".")

    If UBound(CnflctCount_IIP) = 1 Then
        Maskbits = CnflctCount_IIP(1)
    Else
        Maskbits = 0
    End If


    If Maskbits < 0 Or Maskbits > 32 Then
        IP_Count = "Invalid Mask Bits"
        GoTo last
    End If

    If Maskbits = 0 Then
        SPIP = Split(CnflctCount_IIP(0), ".")
    Else
        SPIP = Split(IP_Subnet(CnflctCount_IIP(0), Maskbits), ".")
    End If

    IPNumSt = SPIP(3) + SPIP(2) * 256 + SPIP(1) * 256 * 256 + SPIP(0) * 256 * 256 * 256
    If Maskbits = 0 Then
        IPNumEnd = IPNumSt
    Else
        IPNumEnd = IPNumSt + 2 ^ (32 - Maskbits) - 1
    End If

    If (IPRnge Is Nothing) = False Then
        For Each rngCell In IPRnge.Cells
            If IsEmpty(rngCell.Value) = False And IsError(rngCell.Value) = False Then

                If IP_ErrChk(rngCell.Value) = "Error" Then
                    IP_Count = "Invalid Range"
                    GoTo last
                End If

                CnflctCount_IIPRnge = Split(rngCell.Value, "/")
                PIPRnge = Split(CnflctCount_IIPRnge(0), ".")
                RngeMaskbits = CnflctCount_IIPRnge(1)


                If RngeMaskbits < 1 Or RngeMaskbits > 32 Then
                    IP_Count = "Invalid Mask Bits"
                    GoTo last
                End If


                SPIPRnge = Split(IP_Subnet(CnflctCount_IIPRnge(0), RngeMaskbits), ".")
                IPRngeNumSt = SPIPRnge(3) + SPIPRnge(2) * 256 + SPIPRnge(1) * 256 * 256 + SPIPRnge(0) * 256 * 256 * 256
                IPRngeNumEnd = IPRngeNumSt + 2 ^ (32 - RngeMaskbits) - 1

                If ((IPNumSt < IPRngeNumSt) And (IPNumEnd < IPRngeNumSt)) Or ((IPNumSt > IPRngeNumEnd) And (IPNumEnd > IPRngeNumEnd)) Then
                Else
                    ConfCount = ConfCount + 1

                End If

            End If
        Next rngCell
    End If
    IP_Count = ConfCount


last:

End Function

